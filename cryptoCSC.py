import random
data_emojis = [
    "(｡◕‿◕｡)",
    "( ͡° ͜ʖ ͡°)",
    "(っ▀¯▀)つ",
    "ʕ •`ᴥ•´ʔ",
    "V•ᴥ•V",
    "[¬º-°]¬",
    "(⊃｡•́‿•̀｡)⊃",
    "(っ˘ڡ˘ς)",
    "ヽ༼ ಠ益ಠ ༽ﾉ",
    "¯\_(⊙︿⊙)_/¯",
    "⊂(◉‿◉)つ",
    "ヽ(´ー｀)ノ",
    "(._.)",
    "(⊙.☉)7",
    "┌(ㆆ㉨ㆆ)ʃ",
    "(´･_･`)"
]

separator_emojis = [
    ":)", ":(", ":O", ":|", ":/", ":]", ":[", ":}", ":{", "8)", "8("
]

def multiple_encrypt_CSC(string, iterations, data_table, separator_table, magnitude_seed, magnitude_letter):
    encrypted_string = string
    for i in range(iterations):
        encrypted_string = encrypt_CSC(encrypted_string, data_emojis, separator_emojis, magnitude_seed, magnitude_letter)
    return encrypted_string

def encrypt_CSC(string, data_table, separator_table, magnitude_seed, magnitude_letter):
    """
    This function encrypt in CSC the passed string.
    magnitude_seed and magnitude_letter <= 255
    """
    seed = random.randint(16 ** magnitude_seed, (16 ** (magnitude_seed + 1)) - 1)
    random.seed(seed)
    new_data_table = data_table.copy()
    random.shuffle(new_data_table)
    encoded_string  = ""
    size_letter = 16 ** magnitude_letter - 1
    for byte in string.encode():
        encoded_string += hex_to_correspondence(
            hex(
                byte + random.randint(16 ** magnitude_seed, (16 ** (magnitude_seed + 1)) - 1) % size_letter
                )[2:][::-1],
            new_data_table
            ) + random.choice(separator_table)
    hexa_magnitude_seed = "0" + hex(magnitude_seed)[2:] if len(hex(magnitude_seed)) == 3 else hex(magnitude_seed)[2:]
    hexa_magnitude_letter = "0" + hex(magnitude_letter)[2:] if len(hex(magnitude_letter)) == 3 else hex(magnitude_letter)[2:]
    return (
        hex_to_correspondence(hexa_magnitude_seed, data_table) +
        hex_to_correspondence(hexa_magnitude_letter, new_data_table) +
        hex_to_correspondence(hex(seed)[2:], data_table) +
        encoded_string
        )

def hex_to_correspondence(hexa, data_table):
    """
    Convert each hexa digit into its correspondence in
    the data table.
    """
    
    result = ""
    for c in hexa:
        result += data_table[int(c, 16)]
    return result

def search_correspondence(index, encoded_string, data_table, separator_table):
    """
    Search the correspondence of an encoded string's part beginning at the index
    and finishing index + size_slice via the data and separator table passed.
    Return a dictionnary describing the type of the correspondance (data or separator),
    its value if it's a data, and the index next of this correspondence.
    """

    size_slice = 1
    while True:
        if encoded_string[index: index + size_slice] in data_table:
            return {"type" : "value", "value" : data_table.index(encoded_string[index : index + size_slice]), "next_index" : index + size_slice}
        elif encoded_string[index: index + size_slice] in separator_table:
            return {"type": "separator", "next_index" : index + size_slice}
        size_slice += 1

def decrypt_CSC(encoded_string : str, data_table : list, separator_table : list) -> str:
    """
    Decrypt the encoded string in CSC, with the data table and the separator table.
    Return the decoded string.
    """
    first_part_magnitude_seed = search_correspondence(0, encoded_string, data_table, separator_table)
    second_part_magnitude_seed = search_correspondence(first_part_magnitude_seed["next_index"], encoded_string, data_table, separator_table)
    magnitude_seed = first_part_magnitude_seed["value"] * 16 + second_part_magnitude_seed["value"]
    # skip the size letter
    first_skip = search_correspondence(second_part_magnitude_seed["next_index"], encoded_string, data_table, separator_table)
    second_skip = search_correspondence(first_skip["next_index"], encoded_string, data_table, separator_table)
    # get the seed
    seed = 0
    prev_correspondence = second_skip
    for power in range(magnitude_seed, -1, -1):
        prev_correspondence = search_correspondence(prev_correspondence["next_index"], encoded_string, data_table, separator_table)
        seed += prev_correspondence["value"] * 16 ** power
    random.seed(seed)
    # get the table correspondence
    new_data_table = data_table.copy()
    random.shuffle(new_data_table)
    # get the magnitude_letter
    first_part_magnitude_letter = search_correspondence(second_part_magnitude_seed["next_index"], encoded_string, new_data_table, separator_table)
    second_part_magnitude_letter = search_correspondence(first_part_magnitude_letter["next_index"], encoded_string, new_data_table, separator_table)
    magnitude_letter = first_part_magnitude_letter["value"] * 16 + second_part_magnitude_letter["value"]
    size_letter = 16 ** magnitude_letter - 1
    # decode the encoded string
    decoded_string = bytearray()
    current_byte = 0
    power = 0
    finished_decoded_data = False
    while not finished_decoded_data:
        prev_correspondence = search_correspondence(prev_correspondence["next_index"], encoded_string, new_data_table, separator_table)
        if prev_correspondence["type"] == "value":
            current_byte += prev_correspondence["value"] * 16 ** power
            power += 1
        else:
            current_byte = (current_byte - random.randint(16 ** magnitude_seed, (16 ** (magnitude_seed + 1)) - 1) % size_letter) % size_letter
            random.choice(separator_table)
            decoded_string.append(current_byte)
            if len(encoded_string) == prev_correspondence["next_index"]:
                finished_decoded_data = True
            current_byte = 0
            power = 0
    return decoded_string.decode("utf-8")

if __name__ == "__main__":
    # Here is the encoded text that I put in my GoogleDoc
    encoded_string= "( ͡° ͜ʖ ͡°)(っ▀¯▀)つ(っ˘ڡ˘ς)(._.)⊂(◉‿◉)つʕ •`ᴥ•´ʔ⊂(◉‿◉)つ(っ▀¯▀)つ(._.)(｡◕‿◕｡)¯\_(⊙︿⊙)_/¯(っ▀¯▀)つ(´･_･`)(｡◕‿◕｡)ヽ༼ ಠ益ಠ ༽ﾉ[¬º-°]¬(´･_･`)V•ᴥ•V¯\_(⊙︿⊙)_/¯(._.)(っ▀¯▀)つ(｡◕‿◕｡)(⊃｡•́‿•̀｡)⊃(._.)⊂(◉‿◉)つʕ •`ᴥ•´ʔ( ͡° ͜ʖ ͡°)ヽ(´ー｀)ノヽ༼ ಠ益ಠ ༽ﾉ(._.)(._.):O⊂(◉‿◉)つ┌(ㆆ㉨ㆆ)ʃ¯\_(⊙︿⊙)_/¯┌(ㆆ㉨ㆆ)ʃ(._.)V•ᴥ•V( ͡° ͜ʖ ͡°)( ͡° ͜ʖ ͡°)8)ヽ(´ー｀)ノ(⊙.☉)7(｡◕‿◕｡)(._.)( ͡° ͜ʖ ͡°)( ͡° ͜ʖ ͡°)(っ˘ڡ˘ς)┌(ㆆ㉨ㆆ)ʃ8(( ͡° ͜ʖ ͡°)(っ▀¯▀)つ(´･_･`)(⊙.☉)7(⊃｡•́‿•̀｡)⊃(´･_･`)V•ᴥ•V:/ʕ •`ᴥ•´ʔ(っ▀¯▀)つヽ༼ ಠ益ಠ ༽ﾉヽ(´ー｀)ノ┌(ㆆ㉨ㆆ)ʃヽ༼ ಠ益ಠ ༽ﾉ(｡◕‿◕｡)( ͡° ͜ʖ ͡°)8((っ▀¯▀)つV•ᴥ•V(っ▀¯▀)つ(._.)ʕ •`ᴥ•´ʔヽ༼ ಠ益ಠ ༽ﾉ(｡◕‿◕｡)¯\_(⊙︿⊙)_/¯:/ʕ •`ᴥ•´ʔ┌(ㆆ㉨ㆆ)ʃ⊂(◉‿◉)つ( ͡° ͜ʖ ͡°)ʕ •`ᴥ•´ʔ(⊃｡•́‿•̀｡)⊃⊂(◉‿◉)つ:((⊃｡•́‿•̀｡)⊃(._.)[¬º-°]¬ʕ •`ᴥ•´ʔ(´･_･`)┌(ㆆ㉨ㆆ)ʃV•ᴥ•V┌(ㆆ㉨ㆆ)ʃ:((⊙.☉)7(._.)V•ᴥ•V(._.)(⊙.☉)7ʕ •`ᴥ•´ʔ(´･_･`)ʕ •`ᴥ•´ʔ:(V•ᴥ•V(´･_･`)[¬º-°]¬ヽ(´ー｀)ノ(っ˘ڡ˘ς)V•ᴥ•Vヽ༼ ಠ益ಠ ༽ﾉ(⊃｡•́‿•̀｡)⊃8(ʕ •`ᴥ•´ʔ( ͡° ͜ʖ ͡°)( ͡° ͜ʖ ͡°)ヽ(´ー｀)ノ(´･_･`)(⊙.☉)7(っ˘ڡ˘ς)(._.)8)(._.)⊂(◉‿◉)つ(._.)ヽ(´ー｀)ノ(⊙.☉)7¯\_(⊙︿⊙)_/¯(._.)⊂(◉‿◉)つ:O( ͡° ͜ʖ ͡°)⊂(◉‿◉)つ¯\_(⊙︿⊙)_/¯[¬º-°]¬ヽ༼ ಠ益ಠ ༽ﾉ(._.)┌(ㆆ㉨ㆆ)ʃヽ༼ ಠ益ಠ ༽ﾉ:)( ͡° ͜ʖ ͡°)(⊙.☉)7(っ▀¯▀)つヽ(´ー｀)ノヽ༼ ಠ益ಠ ༽ﾉ(._.)┌(ㆆ㉨ㆆ)ʃ(っ▀¯▀)つ:/(⊙.☉)7ʕ •`ᴥ•´ʔʕ •`ᴥ•´ʔʕ •`ᴥ•´ʔヽ༼ ಠ益ಠ ༽ﾉヽ(´ー｀)ノV•ᴥ•V¯\_(⊙︿⊙)_/¯:}¯\_(⊙︿⊙)_/¯(´･_･`)ʕ •`ᴥ•´ʔ( ͡° ͜ʖ ͡°)V•ᴥ•Vヽ(´ー｀)ノヽ(´ー｀)ノ(´･_･`):/V•ᴥ•V┌(ㆆ㉨ㆆ)ʃ⊂(◉‿◉)つ(._.)(っ▀¯▀)つ(´･_･`)(´･_･`)(｡◕‿◕｡)8)ʕ •`ᴥ•´ʔ(⊙.☉)7¯\_(⊙︿⊙)_/¯(っ˘ڡ˘ς)V•ᴥ•Vヽ༼ ಠ益ಠ ༽ﾉ(⊃｡•́‿•̀｡)⊃8(( ͡° ͜ʖ ͡°)ʕ •`ᴥ•´ʔ(⊙.☉)7(⊙.☉)7⊂(◉‿◉)つ( ͡° ͜ʖ ͡°)(´･_･`)(⊙.☉)7:](⊃｡•́‿•̀｡)⊃¯\_(⊙︿⊙)_/¯(._.)¯\_(⊙︿⊙)_/¯¯\_(⊙︿⊙)_/¯┌(ㆆ㉨ㆆ)ʃ¯\_(⊙︿⊙)_/¯(´･_･`):](._.)(._.)ヽ(´ー｀)ノʕ •`ᴥ•´ʔ¯\_(⊙︿⊙)_/¯V•ᴥ•V( ͡° ͜ʖ ͡°)(._.):)(´･_･`)(っ▀¯▀)つヽ༼ ಠ益ಠ ༽ﾉ⊂(◉‿◉)つ(´･_･`)ヽ༼ ಠ益ಠ ༽ﾉ(⊙.☉)7:]ヽ༼ ಠ益ಠ ༽ﾉ(っ▀¯▀)つ⊂(◉‿◉)つʕ •`ᴥ•´ʔ(｡◕‿◕｡)ヽ༼ ಠ益ಠ ༽ﾉ(⊙.☉)7ʕ •`ᴥ•´ʔ8((っ˘ڡ˘ς)(⊃｡•́‿•̀｡)⊃( ͡° ͜ʖ ͡°)(._.)ʕ •`ᴥ•´ʔV•ᴥ•V(っ▀¯▀)つヽ༼ ಠ益ಠ ༽ﾉ:)(⊃｡•́‿•̀｡)⊃(っ▀¯▀)つ(._.)ヽ༼ ಠ益ಠ ༽ﾉ┌(ㆆ㉨ㆆ)ʃヽ༼ ಠ益ಠ ༽ﾉ(っ▀¯▀)つ:)(｡◕‿◕｡)(⊃｡•́‿•̀｡)⊃(´･_･`)(⊙.☉)7(っ▀¯▀)つ⊂(◉‿◉)つ(っ˘ڡ˘ς)ヽ(´ー｀)ノ:{(´･_･`)⊂(◉‿◉)つ¯\_(⊙︿⊙)_/¯(._.)(._.)ʕ •`ᴥ•´ʔヽ(´ー｀)ノ(⊃｡•́‿•̀｡)⊃:O¯\_(⊙︿⊙)_/¯(._.)( ͡° ͜ʖ ͡°)(⊃｡•́‿•̀｡)⊃(´･_･`)¯\_(⊙︿⊙)_/¯(⊃｡•́‿•̀｡)⊃¯\_(⊙︿⊙)_/¯:](._.)(っ▀¯▀)つ(｡◕‿◕｡)[¬º-°]¬( ͡° ͜ʖ ͡°)(⊃｡•́‿•̀｡)⊃( ͡° ͜ʖ ͡°)(っ▀¯▀)つ:{(._.)[¬º-°]¬⊂(◉‿◉)つ[¬º-°]¬(⊃｡•́‿•̀｡)⊃(っ▀¯▀)つʕ •`ᴥ•´ʔ(´･_･`):(⊂(◉‿◉)つʕ •`ᴥ•´ʔ(´･_･`)V•ᴥ•V(っ˘ڡ˘ς)(っ▀¯▀)つ(｡◕‿◕｡)¯\_(⊙︿⊙)_/¯8)(｡◕‿◕｡)ヽ༼ ಠ益ಠ ༽ﾉʕ •`ᴥ•´ʔ(っ˘ڡ˘ς)(⊃｡•́‿•̀｡)⊃⊂(◉‿◉)つ(｡◕‿◕｡)(｡◕‿◕｡):(ヽ(´ー｀)ノV•ᴥ•V¯\_(⊙︿⊙)_/¯(っ▀¯▀)つヽ༼ ಠ益ಠ ༽ﾉV•ᴥ•V(´･_･`)ʕ •`ᴥ•´ʔ:/ʕ •`ᴥ•´ʔ(⊙.☉)7(っ▀¯▀)つヽ༼ ಠ益ಠ ༽ﾉヽ(´ー｀)ノ(´･_･`)(⊃｡•́‿•̀｡)⊃⊂(◉‿◉)つ8)⊂(◉‿◉)つ(｡◕‿◕｡)(⊙.☉)7¯\_(⊙︿⊙)_/¯( ͡° ͜ʖ ͡°)(｡◕‿◕｡)( ͡° ͜ʖ ͡°)(っ▀¯▀)つ:|(´･_･`)ヽ༼ ಠ益ಠ ༽ﾉV•ᴥ•V(っ˘ڡ˘ς)(⊃｡•́‿•̀｡)⊃⊂(◉‿◉)つ( ͡° ͜ʖ ͡°)(´･_･`):{[¬º-°]¬┌(ㆆ㉨ㆆ)ʃ┌(ㆆ㉨ㆆ)ʃ⊂(◉‿◉)つ( ͡° ͜ʖ ͡°)(｡◕‿◕｡)(っ▀¯▀)つ[¬º-°]¬:)( ͡° ͜ʖ ͡°)( ͡° ͜ʖ ͡°)┌(ㆆ㉨ㆆ)ʃヽ༼ ಠ益ಠ ༽ﾉ┌(ㆆ㉨ㆆ)ʃ(っ˘ڡ˘ς)(._.)ʕ •`ᴥ•´ʔ:O(´･_･`)(⊙.☉)7(っ▀¯▀)つʕ •`ᴥ•´ʔ¯\_(⊙︿⊙)_/¯( ͡° ͜ʖ ͡°)(._.)ʕ •`ᴥ•´ʔ:((._.)[¬º-°]¬(´･_･`)(´･_･`)(⊃｡•́‿•̀｡)⊃( ͡° ͜ʖ ͡°)V•ᴥ•V¯\_(⊙︿⊙)_/¯:)(´･_･`)( ͡° ͜ʖ ͡°)¯\_(⊙︿⊙)_/¯V•ᴥ•V⊂(◉‿◉)つ( ͡° ͜ʖ ͡°)(っ▀¯▀)つʕ •`ᴥ•´ʔ:Oヽ(´ー｀)ノ(⊃｡•́‿•̀｡)⊃¯\_(⊙︿⊙)_/¯(っ▀¯▀)つ(っ▀¯▀)つ┌(ㆆ㉨ㆆ)ʃ(⊃｡•́‿•̀｡)⊃¯\_(⊙︿⊙)_/¯:/ʕ •`ᴥ•´ʔ(⊃｡•́‿•̀｡)⊃(._.)(っ▀¯▀)つ(っ▀¯▀)つ(⊙.☉)7[¬º-°]¬(｡◕‿◕｡):}(⊃｡•́‿•̀｡)⊃┌(ㆆ㉨ㆆ)ʃ(⊙.☉)7( ͡° ͜ʖ ͡°)ヽ༼ ಠ益ಠ ༽ﾉヽ(´ー｀)ノ(っ˘ڡ˘ς)┌(ㆆ㉨ㆆ)ʃ:/¯\_(⊙︿⊙)_/¯( ͡° ͜ʖ ͡°)(｡◕‿◕｡)( ͡° ͜ʖ ͡°)ヽ(´ー｀)ノ(´･_･`)(っ▀¯▀)つ(⊙.☉)7:O(⊃｡•́‿•̀｡)⊃ヽ(´ー｀)ノヽ༼ ಠ益ಠ ༽ﾉ⊂(◉‿◉)つ¯\_(⊙︿⊙)_/¯(⊙.☉)7[¬º-°]¬ヽ(´ー｀)ノ:Oヽ(´ー｀)ノʕ •`ᴥ•´ʔヽ(´ー｀)ノ(｡◕‿◕｡)⊂(◉‿◉)つ┌(ㆆ㉨ㆆ)ʃ(´･_･`)(._.):O┌(ㆆ㉨ㆆ)ʃ(._.)⊂(◉‿◉)つ(._.)(⊃｡•́‿•̀｡)⊃(っ▀¯▀)つ( ͡° ͜ʖ ͡°)[¬º-°]¬:/[¬º-°]¬ʕ •`ᴥ•´ʔヽ(´ー｀)ノ(⊃｡•́‿•̀｡)⊃(っ▀¯▀)つ(っ˘ڡ˘ς)(⊃｡•́‿•̀｡)⊃(´･_･`):((._.)ʕ •`ᴥ•´ʔヽ(´ー｀)ノヽ༼ ಠ益ಠ ༽ﾉ(⊙.☉)7(._.)(⊃｡•́‿•̀｡)⊃¯\_(⊙︿⊙)_/¯:)ʕ •`ᴥ•´ʔ¯\_(⊙︿⊙)_/¯(._.)ヽ(´ー｀)ノ⊂(◉‿◉)つヽ(´ー｀)ノV•ᴥ•V(⊃｡•́‿•̀｡)⊃:]( ͡° ͜ʖ ͡°)ヽ(´ー｀)ノV•ᴥ•V(._.)(⊃｡•́‿•̀｡)⊃(⊃｡•́‿•̀｡)⊃⊂(◉‿◉)つ( ͡° ͜ʖ ͡°):)ʕ •`ᴥ•´ʔ(っ▀¯▀)つ(｡◕‿◕｡)V•ᴥ•Vʕ •`ᴥ•´ʔ[¬º-°]¬ヽ༼ ಠ益ಠ ༽ﾉ[¬º-°]¬8((っ▀¯▀)つʕ •`ᴥ•´ʔV•ᴥ•V[¬º-°]¬(´･_･`)[¬º-°]¬(._.)⊂(◉‿◉)つ:O⊂(◉‿◉)つ(っ▀¯▀)つ(｡◕‿◕｡)┌(ㆆ㉨ㆆ)ʃ(っ˘ڡ˘ς)ʕ •`ᴥ•´ʔ(´･_･`)┌(ㆆ㉨ㆆ)ʃ:{(｡◕‿◕｡)(っ˘ڡ˘ς)(っ˘ڡ˘ς)¯\_(⊙︿⊙)_/¯(´･_･`)(._.)⊂(◉‿◉)つV•ᴥ•V8)[¬º-°]¬(っ▀¯▀)つ[¬º-°]¬ヽ༼ ಠ益ಠ ༽ﾉ(⊃｡•́‿•̀｡)⊃V•ᴥ•V(⊙.☉)7(⊙.☉)7:{ヽ༼ ಠ益ಠ ༽ﾉ(⊙.☉)7(っ▀¯▀)つ( ͡° ͜ʖ ͡°)(⊙.☉)7¯\_(⊙︿⊙)_/¯⊂(◉‿◉)つ(⊃｡•́‿•̀｡)⊃:)(⊃｡•́‿•̀｡)⊃( ͡° ͜ʖ ͡°)(._.)ʕ •`ᴥ•´ʔ(._.)(っ▀¯▀)つ(._.)(っ▀¯▀)つ:/┌(ㆆ㉨ㆆ)ʃʕ •`ᴥ•´ʔ(｡◕‿◕｡)(っ˘ڡ˘ς)ヽ(´ー｀)ノ(｡◕‿◕｡)(⊃｡•́‿•̀｡)⊃⊂(◉‿◉)つ:((｡◕‿◕｡)(⊙.☉)7(⊙.☉)7( ͡° ͜ʖ ͡°)ʕ •`ᴥ•´ʔV•ᴥ•V(っ▀¯▀)つヽ༼ ಠ益ಠ ༽ﾉ:/ʕ •`ᴥ•´ʔ⊂(◉‿◉)つ(っ˘ڡ˘ς)⊂(◉‿◉)つ(⊙.☉)7(っ˘ڡ˘ς)ヽ(´ー｀)ノ(っ▀¯▀)つ8([¬º-°]¬(⊃｡•́‿•̀｡)⊃(._.)[¬º-°]¬¯\_(⊙︿⊙)_/¯(っ▀¯▀)つ(っ▀¯▀)つV•ᴥ•V8)(⊃｡•́‿•̀｡)⊃ヽ༼ ಠ益ಠ ༽ﾉ[¬º-°]¬(´･_･`)ʕ •`ᴥ•´ʔ( ͡° ͜ʖ ͡°)(´･_･`)ヽ(´ー｀)ノ:[ヽ༼ ಠ益ಠ ༽ﾉ⊂(◉‿◉)つ[¬º-°]¬(っ˘ڡ˘ς)ʕ •`ᴥ•´ʔ(っ▀¯▀)つ(´･_･`)(っ▀¯▀)つ8(¯\_(⊙︿⊙)_/¯ヽ(´ー｀)ノ( ͡° ͜ʖ ͡°)¯\_(⊙︿⊙)_/¯¯\_(⊙︿⊙)_/¯(⊙.☉)7(⊙.☉)7¯\_(⊙︿⊙)_/¯:{(｡◕‿◕｡)(⊃｡•́‿•̀｡)⊃( ͡° ͜ʖ ͡°)[¬º-°]¬⊂(◉‿◉)つ( ͡° ͜ʖ ͡°)(っ˘ڡ˘ς)ヽ༼ ಠ益ಠ ༽ﾉ:/(っ▀¯▀)つ(っ▀¯▀)つヽ(´ー｀)ノ(._.)[¬º-°]¬(っ˘ڡ˘ς)⊂(◉‿◉)つ( ͡° ͜ʖ ͡°):((._.)ʕ •`ᴥ•´ʔ(⊃｡•́‿•̀｡)⊃[¬º-°]¬ヽ༼ ಠ益ಠ ༽ﾉV•ᴥ•V[¬º-°]¬(⊙.☉)7:](｡◕‿◕｡)(⊙.☉)7ヽ༼ ಠ益ಠ ༽ﾉ⊂(◉‿◉)つV•ᴥ•V(⊙.☉)7(っ▀¯▀)つ¯\_(⊙︿⊙)_/¯:O⊂(◉‿◉)つ(っ˘ڡ˘ς)(｡◕‿◕｡)(っ˘ڡ˘ς)ヽ༼ ಠ益ಠ ༽ﾉ(っ▀¯▀)つ⊂(◉‿◉)つ(｡◕‿◕｡):/ʕ •`ᴥ•´ʔ⊂(◉‿◉)つ(⊃｡•́‿•̀｡)⊃(っ˘ڡ˘ς)(っ˘ڡ˘ς)ヽ(´ー｀)ノ(っ˘ڡ˘ς)(｡◕‿◕｡):O(._.)ʕ •`ᴥ•´ʔ┌(ㆆ㉨ㆆ)ʃ(⊙.☉)7¯\_(⊙︿⊙)_/¯(っ˘ڡ˘ς)┌(ㆆ㉨ㆆ)ʃV•ᴥ•V8)(⊙.☉)7(｡◕‿◕｡)V•ᴥ•V(._.)¯\_(⊙︿⊙)_/¯(っ˘ڡ˘ς)(⊙.☉)7(⊃｡•́‿•̀｡)⊃:(( ͡° ͜ʖ ͡°)(｡◕‿◕｡)[¬º-°]¬┌(ㆆ㉨ㆆ)ʃ(⊃｡•́‿•̀｡)⊃ヽ(´ー｀)ノ(⊙.☉)7(⊙.☉)78)┌(ㆆ㉨ㆆ)ʃ(っ˘ڡ˘ς)(っ▀¯▀)つ(っ˘ڡ˘ς)(っ˘ڡ˘ς)(._.)(⊃｡•́‿•̀｡)⊃( ͡° ͜ʖ ͡°):/(っ▀¯▀)つ[¬º-°]¬(._.)( ͡° ͜ʖ ͡°)(´･_･`)¯\_(⊙︿⊙)_/¯ヽ༼ ಠ益ಠ ༽ﾉ( ͡° ͜ʖ ͡°):]⊂(◉‿◉)つヽ༼ ಠ益ಠ ༽ﾉ(｡◕‿◕｡)(´･_･`)ヽ༼ ಠ益ಠ ༽ﾉ¯\_(⊙︿⊙)_/¯┌(ㆆ㉨ㆆ)ʃヽ༼ ಠ益ಠ ༽ﾉ:}( ͡° ͜ʖ ͡°)⊂(◉‿◉)つ┌(ㆆ㉨ㆆ)ʃヽ(´ー｀)ノʕ •`ᴥ•´ʔV•ᴥ•V┌(ㆆ㉨ㆆ)ʃ:[(⊃｡•́‿•̀｡)⊃(⊃｡•́‿•̀｡)⊃⊂(◉‿◉)つ(⊙.☉)7(⊙.☉)7⊂(◉‿◉)つ(っ▀¯▀)つ¯\_(⊙︿⊙)_/¯:)⊂(◉‿◉)つV•ᴥ•V⊂(◉‿◉)つ(._.)ʕ •`ᴥ•´ʔV•ᴥ•V(´･_･`)ʕ •`ᴥ•´ʔ:]ʕ •`ᴥ•´ʔ( ͡° ͜ʖ ͡°)(⊙.☉)7ヽ༼ ಠ益ಠ ༽ﾉ⊂(◉‿◉)つ(._.)(っ▀¯▀)つ⊂(◉‿◉)つ:|ヽ(´ー｀)ノ(っ˘ڡ˘ς)┌(ㆆ㉨ㆆ)ʃ⊂(◉‿◉)つ┌(ㆆ㉨ㆆ)ʃ(._.)⊂(◉‿◉)つ(｡◕‿◕｡):{[¬º-°]¬V•ᴥ•V⊂(◉‿◉)つヽ༼ ಠ益ಠ ༽ﾉ(._.)ヽ༼ ಠ益ಠ ༽ﾉ(⊃｡•́‿•̀｡)⊃[¬º-°]¬:Oヽ༼ ಠ益ಠ ༽ﾉʕ •`ᴥ•´ʔヽ༼ ಠ益ಠ ༽ﾉ(⊃｡•́‿•̀｡)⊃V•ᴥ•Vヽ༼ ಠ益ಠ ༽ﾉ[¬º-°]¬ヽ(´ー｀)ノ:[(｡◕‿◕｡)ʕ •`ᴥ•´ʔʕ •`ᴥ•´ʔヽ(´ー｀)ノ(⊙.☉)7(´･_･`)(._.)ʕ •`ᴥ•´ʔ:}(⊃｡•́‿•̀｡)⊃¯\_(⊙︿⊙)_/¯(っ▀¯▀)つ( ͡° ͜ʖ ͡°)(｡◕‿◕｡)V•ᴥ•V(っ˘ڡ˘ς)[¬º-°]¬:/(っ▀¯▀)つヽ(´ー｀)ノ┌(ㆆ㉨ㆆ)ʃ(´･_･`)⊂(◉‿◉)つʕ •`ᴥ•´ʔヽ(´ー｀)ノ(｡◕‿◕｡):[ヽ(´ー｀)ノ⊂(◉‿◉)つ(⊃｡•́‿•̀｡)⊃ヽ༼ ಠ益ಠ ༽ﾉ(っ˘ڡ˘ς)ヽ(´ー｀)ノʕ •`ᴥ•´ʔV•ᴥ•V8(( ͡° ͜ʖ ͡°)┌(ㆆ㉨ㆆ)ʃʕ •`ᴥ•´ʔ(⊙.☉)7( ͡° ͜ʖ ͡°)ʕ •`ᴥ•´ʔ(⊃｡•́‿•̀｡)⊃( ͡° ͜ʖ ͡°):}[¬º-°]¬ʕ •`ᴥ•´ʔʕ •`ᴥ•´ʔ(⊙.☉)7ヽ༼ ಠ益ಠ ༽ﾉ(._.)[¬º-°]¬(._.)8)(´･_･`)ʕ •`ᴥ•´ʔ┌(ㆆ㉨ㆆ)ʃヽ(´ー｀)ノヽ༼ ಠ益ಠ ༽ﾉ¯\_(⊙︿⊙)_/¯V•ᴥ•V┌(ㆆ㉨ㆆ)ʃ:(¯\_(⊙︿⊙)_/¯(っ˘ڡ˘ς)(｡◕‿◕｡)(._.)(⊙.☉)7( ͡° ͜ʖ ͡°)V•ᴥ•V┌(ㆆ㉨ㆆ)ʃ:/(´･_･`)(⊃｡•́‿•̀｡)⊃(⊙.☉)7¯\_(⊙︿⊙)_/¯(´･_･`)¯\_(⊙︿⊙)_/¯ヽ(´ー｀)ノʕ •`ᴥ•´ʔ8(┌(ㆆ㉨ㆆ)ʃ(っ˘ڡ˘ς)(⊃｡•́‿•̀｡)⊃(⊃｡•́‿•̀｡)⊃(⊙.☉)7(⊙.☉)7(._.)ʕ •`ᴥ•´ʔ:{(⊃｡•́‿•̀｡)⊃(´･_･`)(⊃｡•́‿•̀｡)⊃(っ˘ڡ˘ς)ʕ •`ᴥ•´ʔ(´･_･`)(｡◕‿◕｡)(｡◕‿◕｡):]ヽ(´ー｀)ノ(⊃｡•́‿•̀｡)⊃V•ᴥ•V(っ˘ڡ˘ς)┌(ㆆ㉨ㆆ)ʃV•ᴥ•V[¬º-°]¬( ͡° ͜ʖ ͡°):O(⊙.☉)7ヽ༼ ಠ益ಠ ༽ﾉ(._.)(._.)(⊙.☉)7( ͡° ͜ʖ ͡°)⊂(◉‿◉)つ(っ▀¯▀)つ8)(っ▀¯▀)つ(｡◕‿◕｡)ヽ(´ー｀)ノ¯\_(⊙︿⊙)_/¯[¬º-°]¬ヽ༼ ಠ益ಠ ༽ﾉ⊂(◉‿◉)つV•ᴥ•V:]V•ᴥ•V[¬º-°]¬(´･_･`)ʕ •`ᴥ•´ʔ(｡◕‿◕｡)[¬º-°]¬(っ˘ڡ˘ς)(｡◕‿◕｡):/⊂(◉‿◉)つ(っ▀¯▀)つヽ(´ー｀)ノ⊂(◉‿◉)つV•ᴥ•VV•ᴥ•V⊂(◉‿◉)つ¯\_(⊙︿⊙)_/¯:|¯\_(⊙︿⊙)_/¯(っ▀¯▀)つ⊂(◉‿◉)つ( ͡° ͜ʖ ͡°)(⊃｡•́‿•̀｡)⊃( ͡° ͜ʖ ͡°)(っ˘ڡ˘ς)(っ▀¯▀)つ:((っ˘ڡ˘ς)┌(ㆆ㉨ㆆ)ʃ(´･_･`)(._.)[¬º-°]¬(っ▀¯▀)つ(｡◕‿◕｡)¯\_(⊙︿⊙)_/¯:{(⊃｡•́‿•̀｡)⊃(⊙.☉)7(っ˘ڡ˘ς)⊂(◉‿◉)つ(´･_･`)(｡◕‿◕｡)(´･_･`)(⊃｡•́‿•̀｡)⊃:{(´･_･`)ヽ༼ ಠ益ಠ ༽ﾉヽ(´ー｀)ノ┌(ㆆ㉨ㆆ)ʃ┌(ㆆ㉨ㆆ)ʃ[¬º-°]¬⊂(◉‿◉)つ:(( ͡° ͜ʖ ͡°)ヽ༼ ಠ益ಠ ༽ﾉ(⊃｡•́‿•̀｡)⊃(｡◕‿◕｡)(´･_･`)ヽ(´ー｀)ノヽ༼ ಠ益ಠ ༽ﾉ(._.):)ヽ༼ ಠ益ಠ ༽ﾉ(._.)(´･_･`)ヽ(´ー｀)ノ(._.)( ͡° ͜ʖ ͡°)(._.):}(⊃｡•́‿•̀｡)⊃(._.)(⊃｡•́‿•̀｡)⊃ʕ •`ᴥ•´ʔ¯\_(⊙︿⊙)_/¯┌(ㆆ㉨ㆆ)ʃ(っ˘ڡ˘ς)┌(ㆆ㉨ㆆ)ʃ:(⊂(◉‿◉)つ(｡◕‿◕｡)(っ˘ڡ˘ς)(っ▀¯▀)つヽ(´ー｀)ノʕ •`ᴥ•´ʔ(´･_･`):}┌(ㆆ㉨ㆆ)ʃ(⊙.☉)7[¬º-°]¬ヽ༼ ಠ益ಠ ༽ﾉ┌(ㆆ㉨ㆆ)ʃ(´･_･`)ヽ༼ ಠ益ಠ ༽ﾉ⊂(◉‿◉)つ:}( ͡° ͜ʖ ͡°)(´･_･`)ヽ(´ー｀)ノ¯\_(⊙︿⊙)_/¯(っ˘ڡ˘ς)(っ˘ڡ˘ς)¯\_(⊙︿⊙)_/¯ʕ •`ᴥ•´ʔ:}( ͡° ͜ʖ ͡°)⊂(◉‿◉)つ(⊃｡•́‿•̀｡)⊃⊂(◉‿◉)つ(⊙.☉)7ʕ •`ᴥ•´ʔ(｡◕‿◕｡)( ͡° ͜ʖ ͡°):}┌(ㆆ㉨ㆆ)ʃ( ͡° ͜ʖ ͡°)( ͡° ͜ʖ ͡°)(´･_･`)( ͡° ͜ʖ ͡°)(´･_･`)ヽ(´ー｀)ノʕ •`ᴥ•´ʔ:][¬º-°]¬V•ᴥ•Vʕ •`ᴥ•´ʔヽ༼ ಠ益ಠ ༽ﾉ[¬º-°]¬(._.)¯\_(⊙︿⊙)_/¯V•ᴥ•V:|⊂(◉‿◉)つ(´･_･`)(｡◕‿◕｡)(._.)(._.)ヽ(´ー｀)ノ(｡◕‿◕｡)( ͡° ͜ʖ ͡°):)(っ▀¯▀)つ┌(ㆆ㉨ㆆ)ʃヽ༼ ಠ益ಠ ༽ﾉ(⊃｡•́‿•̀｡)⊃(._.)⊂(◉‿◉)つ⊂(◉‿◉)つ(っ▀¯▀)つ:]ʕ •`ᴥ•´ʔ(._.)(´･_･`)(⊙.☉)7V•ᴥ•V[¬º-°]¬(｡◕‿◕｡)⊂(◉‿◉)つ:{( ͡° ͜ʖ ͡°)( ͡° ͜ʖ ͡°)(⊃｡•́‿•̀｡)⊃(⊃｡•́‿•̀｡)⊃V•ᴥ•V(｡◕‿◕｡)ヽ(´ー｀)ノ(⊃｡•́‿•̀｡)⊃:}(⊙.☉)7ヽ༼ ಠ益ಠ ༽ﾉ(._.)⊂(◉‿◉)つV•ᴥ•V¯\_(⊙︿⊙)_/¯V•ᴥ•V(._.)8)(っ▀¯▀)つ(｡◕‿◕｡)(｡◕‿◕｡)ヽ༼ ಠ益ಠ ༽ﾉ(⊙.☉)7[¬º-°]¬⊂(◉‿◉)つ( ͡° ͜ʖ ͡°):/V•ᴥ•V⊂(◉‿◉)つヽ༼ ಠ益ಠ ༽ﾉヽ(´ー｀)ノ(っ˘ڡ˘ς)V•ᴥ•V(っ▀¯▀)つ( ͡° ͜ʖ ͡°):([¬º-°]¬[¬º-°]¬(⊙.☉)7¯\_(⊙︿⊙)_/¯ヽ(´ー｀)ノ(｡◕‿◕｡)⊂(◉‿◉)つ:}ʕ •`ᴥ•´ʔ¯\_(⊙︿⊙)_/¯V•ᴥ•V(｡◕‿◕｡)(⊃｡•́‿•̀｡)⊃ヽ༼ ಠ益ಠ ༽ﾉʕ •`ᴥ•´ʔ:(¯\_(⊙︿⊙)_/¯(´･_･`)┌(ㆆ㉨ㆆ)ʃヽ༼ ಠ益ಠ ༽ﾉ(っ▀¯▀)つ( ͡° ͜ʖ ͡°)(｡◕‿◕｡)¯\_(⊙︿⊙)_/¯8)(⊃｡•́‿•̀｡)⊃(っ▀¯▀)つ┌(ㆆ㉨ㆆ)ʃ(⊙.☉)7(⊙.☉)7¯\_(⊙︿⊙)_/¯V•ᴥ•V(._.):O⊂(◉‿◉)つ┌(ㆆ㉨ㆆ)ʃ(⊙.☉)7(´･_･`)ʕ •`ᴥ•´ʔ(｡◕‿◕｡)┌(ㆆ㉨ㆆ)ʃ(⊙.☉)7:](っ▀¯▀)つヽ༼ ಠ益ಠ ༽ﾉV•ᴥ•V⊂(◉‿◉)つ┌(ㆆ㉨ㆆ)ʃʕ •`ᴥ•´ʔ(っ▀¯▀)つ(´･_･`):O(｡◕‿◕｡)(っ▀¯▀)つ(っ˘ڡ˘ς)ヽ༼ ಠ益ಠ ༽ﾉ⊂(◉‿◉)つ(⊙.☉)7ヽ(´ー｀)ノ(´･_･`):(¯\_(⊙︿⊙)_/¯(._.)⊂(◉‿◉)つV•ᴥ•V┌(ㆆ㉨ㆆ)ʃ(⊙.☉)7[¬º-°]¬V•ᴥ•V:O┌(ㆆ㉨ㆆ)ʃ[¬º-°]¬ヽ༼ ಠ益ಠ ༽ﾉV•ᴥ•V(⊙.☉)7(´･_･`)¯\_(⊙︿⊙)_/¯¯\_(⊙︿⊙)_/¯:(¯\_(⊙︿⊙)_/¯⊂(◉‿◉)つ¯\_(⊙︿⊙)_/¯(´･_･`)(⊙.☉)7(⊙.☉)7┌(ㆆ㉨ㆆ)ʃヽ༼ ಠ益ಠ ༽ﾉ8((⊃｡•́‿•̀｡)⊃ヽ(´ー｀)ノ(⊙.☉)7[¬º-°]¬¯\_(⊙︿⊙)_/¯(っ▀¯▀)つʕ •`ᴥ•´ʔ[¬º-°]¬:Oʕ •`ᴥ•´ʔʕ •`ᴥ•´ʔ(⊙.☉)7ヽ(´ー｀)ノ(._.)¯\_(⊙︿⊙)_/¯¯\_(⊙︿⊙)_/¯(⊙.☉)7:]ʕ •`ᴥ•´ʔ(._.)(._.)( ͡° ͜ʖ ͡°)¯\_(⊙︿⊙)_/¯ヽ༼ ಠ益ಠ ༽ﾉ(´･_･`)ヽ(´ー｀)ノ:O(´･_･`)(っ▀¯▀)つ(._.)┌(ㆆ㉨ㆆ)ʃ(っ▀¯▀)つ(⊙.☉)7⊂(◉‿◉)つヽ༼ ಠ益ಠ ༽ﾉ:[( ͡° ͜ʖ ͡°)(｡◕‿◕｡)(⊙.☉)7(っ▀¯▀)つ(っ▀¯▀)つ┌(ㆆ㉨ㆆ)ʃʕ •`ᴥ•´ʔ( ͡° ͜ʖ ͡°):|ヽ༼ ಠ益ಠ ༽ﾉ(っ˘ڡ˘ς)(´･_･`)[¬º-°]¬┌(ㆆ㉨ㆆ)ʃ(´･_･`)ヽ༼ ಠ益ಠ ༽ﾉ(._.):|(´･_･`)(っ▀¯▀)つ(｡◕‿◕｡)(っ▀¯▀)つʕ •`ᴥ•´ʔ(｡◕‿◕｡)(っ˘ڡ˘ς)⊂(◉‿◉)つ:(( ͡° ͜ʖ ͡°)⊂(◉‿◉)つヽ༼ ಠ益ಠ ༽ﾉ⊂(◉‿◉)つ[¬º-°]¬ヽ༼ ಠ益ಠ ༽ﾉ┌(ㆆ㉨ㆆ)ʃ(⊃｡•́‿•̀｡)⊃8((._.)V•ᴥ•V(´･_･`)ヽ༼ ಠ益ಠ ༽ﾉ(｡◕‿◕｡)ʕ •`ᴥ•´ʔ(｡◕‿◕｡)V•ᴥ•V:][¬º-°]¬(´･_･`)ʕ •`ᴥ•´ʔ(._.)(｡◕‿◕｡)┌(ㆆ㉨ㆆ)ʃ(｡◕‿◕｡)( ͡° ͜ʖ ͡°):[(⊃｡•́‿•̀｡)⊃ヽ༼ ಠ益ಠ ༽ﾉ( ͡° ͜ʖ ͡°)┌(ㆆ㉨ㆆ)ʃʕ •`ᴥ•´ʔ⊂(◉‿◉)つ(⊙.☉)7┌(ㆆ㉨ㆆ)ʃ:(ヽ(´ー｀)ノ( ͡° ͜ʖ ͡°)[¬º-°]¬[¬º-°]¬ʕ •`ᴥ•´ʔ(っ▀¯▀)つ┌(ㆆ㉨ㆆ)ʃ(´･_･`):/(´･_･`)⊂(◉‿◉)つ(⊃｡•́‿•̀｡)⊃ヽ༼ ಠ益ಠ ༽ﾉV•ᴥ•V┌(ㆆ㉨ㆆ)ʃ(´･_･`):[(｡◕‿◕｡)V•ᴥ•Vヽ(´ー｀)ノヽ(´ー｀)ノ(っ▀¯▀)つ(っ▀¯▀)つ¯\_(⊙︿⊙)_/¯V•ᴥ•V:|ヽ(´ー｀)ノ(っ▀¯▀)つ⊂(◉‿◉)つ(っ˘ڡ˘ς)¯\_(⊙︿⊙)_/¯[¬º-°]¬┌(ㆆ㉨ㆆ)ʃ┌(ㆆ㉨ㆆ)ʃ:{(⊃｡•́‿•̀｡)⊃¯\_(⊙︿⊙)_/¯(｡◕‿◕｡)(っ˘ڡ˘ς)V•ᴥ•Vʕ •`ᴥ•´ʔ┌(ㆆ㉨ㆆ)ʃ(っ▀¯▀)つ:|(っ▀¯▀)つV•ᴥ•V(っ▀¯▀)つʕ •`ᴥ•´ʔ[¬º-°]¬ヽ༼ ಠ益ಠ ༽ﾉ(⊃｡•́‿•̀｡)⊃[¬º-°]¬:)ヽ(´ー｀)ノ(｡◕‿◕｡)(⊃｡•́‿•̀｡)⊃V•ᴥ•V(⊃｡•́‿•̀｡)⊃┌(ㆆ㉨ㆆ)ʃ(⊃｡•́‿•̀｡)⊃ヽ༼ ಠ益ಠ ༽ﾉ:(⊂(◉‿◉)つ(⊃｡•́‿•̀｡)⊃(｡◕‿◕｡)¯\_(⊙︿⊙)_/¯(´･_･`)┌(ㆆ㉨ㆆ)ʃ[¬º-°]¬ヽ(´ー｀)ノ:]V•ᴥ•V( ͡° ͜ʖ ͡°)┌(ㆆ㉨ㆆ)ʃヽ༼ ಠ益ಠ ༽ﾉ⊂(◉‿◉)つ⊂(◉‿◉)つ┌(ㆆ㉨ㆆ)ʃ(⊙.☉)7:)┌(ㆆ㉨ㆆ)ʃヽ༼ ಠ益ಠ ༽ﾉ(｡◕‿◕｡)(っ▀¯▀)つ[¬º-°]¬⊂(◉‿◉)つV•ᴥ•V(｡◕‿◕｡):)V•ᴥ•V(っ▀¯▀)つ(⊃｡•́‿•̀｡)⊃(っ▀¯▀)つ(｡◕‿◕｡)ヽ༼ ಠ益ಠ ༽ﾉ(._.)ʕ •`ᴥ•´ʔ:((っ˘ڡ˘ς)(._.)ʕ •`ᴥ•´ʔ(⊃｡•́‿•̀｡)⊃(´･_･`)¯\_(⊙︿⊙)_/¯(っ˘ڡ˘ς)⊂(◉‿◉)つ8)(｡◕‿◕｡)ヽ༼ ಠ益ಠ ༽ﾉ( ͡° ͜ʖ ͡°)(｡◕‿◕｡)(っ˘ڡ˘ς)(´･_･`)(っ▀¯▀)つ(´･_･`):]ヽ(´ー｀)ノV•ᴥ•V[¬º-°]¬(⊙.☉)7(っ˘ڡ˘ς)(｡◕‿◕｡)(っ▀¯▀)つ:)(´･_･`)ʕ •`ᴥ•´ʔ⊂(◉‿◉)つ(._.)(｡◕‿◕｡)¯\_(⊙︿⊙)_/¯⊂(◉‿◉)つ┌(ㆆ㉨ㆆ)ʃ:|┌(ㆆ㉨ㆆ)ʃ(._.)V•ᴥ•VV•ᴥ•V¯\_(⊙︿⊙)_/¯ヽ༼ ಠ益ಠ ༽ﾉ(っ▀¯▀)つ(⊃｡•́‿•̀｡)⊃:/(´･_･`)┌(ㆆ㉨ㆆ)ʃ(._.)⊂(◉‿◉)つヽ༼ ಠ益ಠ ༽ﾉ( ͡° ͜ʖ ͡°)ヽ༼ ಠ益ಠ ༽ﾉ[¬º-°]¬:((｡◕‿◕｡)[¬º-°]¬(´･_･`)(⊙.☉)7(⊃｡•́‿•̀｡)⊃(⊙.☉)7(っ▀¯▀)つ(._.):/(っ˘ڡ˘ς)(｡◕‿◕｡)⊂(◉‿◉)つ⊂(◉‿◉)つ(´･_･`)[¬º-°]¬⊂(◉‿◉)つ:](´･_･`)(｡◕‿◕｡)(⊃｡•́‿•̀｡)⊃⊂(◉‿◉)つ(⊙.☉)7(っ▀¯▀)つヽ༼ ಠ益ಠ ༽ﾉV•ᴥ•V:)(._.)ʕ •`ᴥ•´ʔ(⊃｡•́‿•̀｡)⊃ヽ༼ ಠ益ಠ ༽ﾉ(._.)(っ▀¯▀)つV•ᴥ•V┌(ㆆ㉨ㆆ)ʃ:O(っ˘ڡ˘ς)( ͡° ͜ʖ ͡°)(⊙.☉)7[¬º-°]¬(´･_･`)(⊙.☉)7:O⊂(◉‿◉)つ¯\_(⊙︿⊙)_/¯(｡◕‿◕｡)┌(ㆆ㉨ㆆ)ʃ(⊙.☉)7V•ᴥ•V⊂(◉‿◉)つ(._.):|⊂(◉‿◉)つ[¬º-°]¬¯\_(⊙︿⊙)_/¯┌(ㆆ㉨ㆆ)ʃヽ(´ー｀)ノ(っ˘ڡ˘ς)(｡◕‿◕｡)(´･_･`):Oʕ •`ᴥ•´ʔ(⊙.☉)7V•ᴥ•V⊂(◉‿◉)つヽ༼ ಠ益ಠ ༽ﾉヽ(´ー｀)ノヽ(´ー｀)ノ(⊃｡•́‿•̀｡)⊃:|(｡◕‿◕｡)┌(ㆆ㉨ㆆ)ʃ(っ▀¯▀)つヽ(´ー｀)ノ(⊙.☉)7(｡◕‿◕｡)ʕ •`ᴥ•´ʔヽ(´ー｀)ノ:}(⊙.☉)7(._.)( ͡° ͜ʖ ͡°)(｡◕‿◕｡)(._.)[¬º-°]¬(っ▀¯▀)つ¯\_(⊙︿⊙)_/¯:|¯\_(⊙︿⊙)_/¯( ͡° ͜ʖ ͡°)(っ▀¯▀)つヽ(´ー｀)ノ(｡◕‿◕｡)V•ᴥ•Vヽ(´ー｀)ノ⊂(◉‿◉)つ:]¯\_(⊙︿⊙)_/¯ヽ༼ ಠ益ಠ ༽ﾉヽ(´ー｀)ノV•ᴥ•Vʕ •`ᴥ•´ʔ(｡◕‿◕｡)(っ˘ڡ˘ς)(´･_･`):]( ͡° ͜ʖ ͡°)(｡◕‿◕｡)ʕ •`ᴥ•´ʔ(⊃｡•́‿•̀｡)⊃(｡◕‿◕｡)(｡◕‿◕｡)(｡◕‿◕｡)ヽ(´ー｀)ノ:|(⊙.☉)7[¬º-°]¬(っ˘ڡ˘ς)¯\_(⊙︿⊙)_/¯[¬º-°]¬⊂(◉‿◉)つヽ(´ー｀)ノʕ •`ᴥ•´ʔ:{[¬º-°]¬⊂(◉‿◉)つʕ •`ᴥ•´ʔ(⊙.☉)7[¬º-°]¬( ͡° ͜ʖ ͡°)(⊙.☉)7⊂(◉‿◉)つ:(ʕ •`ᴥ•´ʔ( ͡° ͜ʖ ͡°)(⊙.☉)7(._.)ヽ༼ ಠ益ಠ ༽ﾉ(っ▀¯▀)つ(⊃｡•́‿•̀｡)⊃:OV•ᴥ•V(´･_･`)(⊃｡•́‿•̀｡)⊃┌(ㆆ㉨ㆆ)ʃ(´･_･`)ヽ༼ ಠ益ಠ ༽ﾉ⊂(◉‿◉)つ¯\_(⊙︿⊙)_/¯8)(._.)┌(ㆆ㉨ㆆ)ʃ(っ˘ڡ˘ς)┌(ㆆ㉨ㆆ)ʃ( ͡° ͜ʖ ͡°)⊂(◉‿◉)つʕ •`ᴥ•´ʔ:((っ▀¯▀)つ(｡◕‿◕｡)ヽ(´ー｀)ノ(´･_･`)ヽ(´ー｀)ノ⊂(◉‿◉)つ(っ˘ڡ˘ς)(⊙.☉)7:]⊂(◉‿◉)つヽ(´ー｀)ノ┌(ㆆ㉨ㆆ)ʃ⊂(◉‿◉)つ(´･_･`)⊂(◉‿◉)つ(⊙.☉)7(._.):}┌(ㆆ㉨ㆆ)ʃヽ(´ー｀)ノ( ͡° ͜ʖ ͡°)ヽ༼ ಠ益ಠ ༽ﾉ(´･_･`)¯\_(⊙︿⊙)_/¯(っ▀¯▀)つ(._.):)( ͡° ͜ʖ ͡°)(´･_･`)ヽ༼ ಠ益ಠ ༽ﾉ¯\_(⊙︿⊙)_/¯( ͡° ͜ʖ ͡°)┌(ㆆ㉨ㆆ)ʃ(⊙.☉)7[¬º-°]¬:[ʕ •`ᴥ•´ʔ(っ▀¯▀)つ( ͡° ͜ʖ ͡°)(｡◕‿◕｡)(._.)( ͡° ͜ʖ ͡°)(｡◕‿◕｡)┌(ㆆ㉨ㆆ)ʃ8)┌(ㆆ㉨ㆆ)ʃ(⊃｡•́‿•̀｡)⊃(⊙.☉)7[¬º-°]¬(｡◕‿◕｡)(っ▀¯▀)つ(っ˘ڡ˘ς)(⊙.☉)7:}(⊃｡•́‿•̀｡)⊃(っ▀¯▀)つ[¬º-°]¬ʕ •`ᴥ•´ʔ[¬º-°]¬(っ˘ڡ˘ς)ヽ༼ ಠ益ಠ ༽ﾉ┌(ㆆ㉨ㆆ)ʃ:}┌(ㆆ㉨ㆆ)ʃ┌(ㆆ㉨ㆆ)ʃ(｡◕‿◕｡)ヽ(´ー｀)ノ¯\_(⊙︿⊙)_/¯(._.)V•ᴥ•V(｡◕‿◕｡):}⊂(◉‿◉)つʕ •`ᴥ•´ʔ(´･_･`)(._.)¯\_(⊙︿⊙)_/¯ヽ༼ ಠ益ಠ ༽ﾉʕ •`ᴥ•´ʔ(._.)8)(._.)(._.)¯\_(⊙︿⊙)_/¯(._.)(⊙.☉)7(っ˘ڡ˘ς)(⊙.☉)7V•ᴥ•V:](._.)ヽ༼ ಠ益ಠ ༽ﾉ┌(ㆆ㉨ㆆ)ʃ[¬º-°]¬┌(ㆆ㉨ㆆ)ʃヽ(´ー｀)ノ( ͡° ͜ʖ ͡°)( ͡° ͜ʖ ͡°):(⊂(◉‿◉)つ(⊃｡•́‿•̀｡)⊃ʕ •`ᴥ•´ʔʕ •`ᴥ•´ʔʕ •`ᴥ•´ʔ(´･_･`)[¬º-°]¬(っ▀¯▀)つ:}(._.)ヽ༼ ಠ益ಠ ༽ﾉ( ͡° ͜ʖ ͡°)ヽ༼ ಠ益ಠ ༽ﾉʕ •`ᴥ•´ʔ(._.)ヽ༼ ಠ益ಠ ༽ﾉ[¬º-°]¬:}(｡◕‿◕｡)(っ˘ڡ˘ς)¯\_(⊙︿⊙)_/¯(っ▀¯▀)つ(っ▀¯▀)つ(っ▀¯▀)つ(｡◕‿◕｡)[¬º-°]¬:}V•ᴥ•V(っ˘ڡ˘ς)(´･_･`)[¬º-°]¬[¬º-°]¬(っ▀¯▀)つV•ᴥ•V¯\_(⊙︿⊙)_/¯:O(っ˘ڡ˘ς)⊂(◉‿◉)つ¯\_(⊙︿⊙)_/¯[¬º-°]¬⊂(◉‿◉)つ(._.)(._.)(´･_･`):[┌(ㆆ㉨ㆆ)ʃ(⊃｡•́‿•̀｡)⊃(⊃｡•́‿•̀｡)⊃⊂(◉‿◉)つ⊂(◉‿◉)つ¯\_(⊙︿⊙)_/¯(⊙.☉)7¯\_(⊙︿⊙)_/¯:/"
    print(encoded_string)
    print(
        decrypt_CSC(encoded_string, data_emojis, separator_emojis)
    )